# -*- coding: utf-8 -*-
"""Bonos duales TAMAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lQrkNZH93hrtDOs6EAvJBnFeJSmGIIoc
"""

import pandas as pd
import requests
from datetime import timedelta, datetime
import matplotlib.pyplot as plt
import urllib3
import numpy as np
from dateutil.relativedelta import relativedelta
from dateutil.relativedelta import relativedelta
from matplotlib.colors import LinearSegmentedColormap
from IPython.display import display, Markdown, HTML
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

"""# Funciones"""

def getDataV3(variableID):
    url = f"https://api.bcra.gob.ar/estadisticas/v3.0/Monetarias/{variableID}"
    r = requests.get(url, verify=False)
    return pd.DataFrame(r.json().get('results')).set_index('fecha')

events = {
    'TTM26': datetime(2026, 3, 16),
    'TTJ26': datetime(2026, 6, 30),
    'TTS26': datetime(2026, 9, 15),
    'TTD26': datetime(2026, 12, 15)
}

def simulate(TARGETs_TEM):
    TARGET_FECHA = pd.Timestamp("2026-12-31")
    tamar_tea = getDataV3(variableID=45)['valor'] / 100   # ID=45 es la TAMAR
    tamar_tea.index = pd.to_datetime(tamar_tea.index)
    tamar_tea = tamar_tea.sort_index()
    tamar_tea = tamar_tea.loc[tamar_tea.index > '2025-01-15']
    tamar_tem_spot = ((1 + tamar_tea)**(1/12) - 1)
    tamar_tem = tamar_tem_spot.to_frame(name='tamar_tem_spot')

    inicio = tamar_tem.index[-1] + timedelta(days=1)
    fechas_futuras = pd.date_range(inicio, TARGET_FECHA, freq='B')
    tem_actual = tamar_tem['tamar_tem_spot'].iloc[-1]
    dias_totales = (fechas_futuras[-1] - fechas_futuras[0]).days

    dfs_sim = []
    for TARGET_TEM in TARGETs_TEM:
        df_sim = tem_actual + (TARGET_TEM - tem_actual) * (fechas_futuras - fechas_futuras[0]).days / dias_totales
        df_sim = pd.DataFrame(data=df_sim, index=fechas_futuras, columns=[f'tamar_proy_{str(TARGET_TEM*100)}'])
        dfs_sim.append(df_sim)

    sims = pd.concat(dfs_sim, axis=1)
    df = pd.concat([tamar_tem, sims])
    df['TTM26'] = 0.0225
    df['TTJ26'] = 0.0219
    df['TTS26'] = 0.0217
    df['TTD26'] = 0.0214
    df["tamar_AVG"] = df["tamar_tem_spot"].expanding().mean().where(df["tamar_tem_spot"].notna())

    proy = ["tamar_proy_" + str(x*100) for x in TARGETs_TEM]
    for p in proy:
        df[f"{p}_AVG"] = (
            df["tamar_tem_spot"]
            .fillna(df[p])
            .expanding()
            .mean()
            .where(df[p].notna())
        )
    return df

def chart(df, title):
    plt.style.use('dark_background')
    fig, ax = plt.subplots(dpi=300, facecolor='black', figsize=(12,6))

    colores = {
        'tamar_tem_spot': 'white',
        'tamar_AVG': 'white',
        'TTM26': '#ff8888',
        'TTJ26': '#fb9f3f',
        'TTS26': '#4af6c3',
        'TTD26': '#66CCFF',
    }
    for x in TARGETs_TEM:
        colores.update({"tamar_proy_" + str(x*100) + "_AVG": 'silver'})

    for col, date in events.items():
        df.loc[df.index > date, col] = np.nan

    projection_cols = ["tamar_proy_" + str(x*100) + "_AVG" for x in TARGETs_TEM]
    fixed = ['TTM26','TTJ26','TTS26','TTD26']
    for col in colores:
        y = df[col].dropna()
        if y.empty: continue
        ls = ':' if col=='tamar_tem_spot' else '-'
        ax.plot(y.index, y.values, lw=0.75, color=colores[col], linestyle=ls)
        if col in fixed:
            x0, v0 = y.index[0], y.iloc[0]*100
            ax.text(x0, y.iloc[0]+0.00015, f"{col} tasa fija del {v0:.2f}%", fontsize=5, va='center', ha='left', color=colores[col])
        elif col in projection_cols:
            valor = col.split("_")[2]
            ax.text(y.index[-1], y.iloc[-1], f"escenario TAMAR {float(valor):.1f}% \nValor TEM a dic-26", fontsize=6, va='center', ha='left', color=colores[col])
        else:
            ax.text(y.index[-1], y.iloc[-1], col, fontsize=8, va='center', ha='left', color=colores[col])

    ymn, ymx = ax.get_ylim()
    ytop = ymn + 0.95 * (ymx - ymn)
    for label, xdate in events.items():
        ax.vlines(xdate, ymn, ytop, color=colores[label], lw=0.75, ls='--', label=label)
        ax.text(xdate, ytop, label, fontsize=7, va='bottom', ha='right', color=colores[label])

    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.grid(alpha=0.2)
    ax.set_title(title, fontsize=8)
    ax.tick_params(axis='both', labelsize=6)
    ax.xaxis.label.set_size(6)
    ax.yaxis.label.set_size(6)
    ax.set_ylabel('Tasa Mensual', fontsize=7)
    labels_target = [f"con TAMAR {float(target*100):.1f}% => dic-26" for target in TARGETs_TEM]
    targets = list(events.keys())
    sobre_tasa_tamar = [[] for _ in targets]
    i = 0
    for label, date in events.items():
        tasa_fija = df[label].iloc[0]
        for target in TARGETs_TEM:
            pattern = f"tamar_proy_{target*100}"
            col = next(c for c in df.columns if c.startswith(pattern) and c.endswith("_AVG"))
            pos = df.index.get_indexer([date], method='bfill')[0]
            x, y = df.index[pos], df.iloc[pos][col]
            ax.scatter(x, y, s=140, color=colores[label], zorder=5, alpha=1)
            ax.text(x, y, f"{y*100:.2f}", color='black',
                    fontsize=5, ha='center', va='center', zorder=6)
            if y > tasa_fija:
                sobre_tasa_tamar[i].append(round(float(y - tasa_fija),6))
            else:
                sobre_tasa_tamar[i].append(0)
        i += 1
    plt.show()
    return sobre_tasa_tamar

def showTables(TARGETs_TEM, sobre_tasa_tamar, title_table):
    targets = list(events.keys())
    labels_target = [f"con TAMAR {float(target*100):.1f}% => dic-26" for target in TARGETs_TEM]
    hoy = pd.Timestamp.today()
    base = pd.Timestamp(2025, 1, 29)

    offset = (
        relativedelta(hoy, base).years * 12
        + relativedelta(hoy, base).months
        + relativedelta(hoy, base).days / 30
    )
    meses = pd.Series({
        k: (
            relativedelta(v, hoy).years * 12
            + relativedelta(v, hoy).months
            + relativedelta(v, hoy).days / 30
            + offset
        )
        for k, v in events.items()
    })


    sobre_tasa_tamar_tem = pd.DataFrame(sobre_tasa_tamar, columns=labels_target, index=targets).T.mul(100)
    r = sobre_tasa_tamar_tem.div(100)
    payoff = (((1 + r).pow(meses, axis=1) - 1) * 100).round(2)

    combined = pd.concat([sobre_tasa_tamar_tem, payoff], axis=1,
                        keys=['Diferencial TEM (Tamar-Fija)', 'Diferencial Payoff'])
    tem_cols    = [('Diferencial TEM (Tamar-Fija)', b)    for b in meses.index]
    payoff_cols = [('Diferencial Payoff', b) for b in meses.index]
    combined.loc['Meses de payoff', tem_cols]    = meses.values
    combined.loc['Meses de payoff', payoff_cols] = meses.values

    data_rows = combined.index.drop('Meses de payoff')
    color_map = {
        'TTM26':'#ff8888','TTJ26':'#fb9f3f',
        'TTS26':'#4af6c3','TTD26':'#66CCFF'
    }

    vmin, vmax = payoff.values.min(), payoff.values.max()

    styled = combined.style
    for bono, color in color_map.items():
        cmap = LinearSegmentedColormap.from_list(None, ['white', color])
        styled = styled.background_gradient(
            cmap=cmap,
            subset=pd.IndexSlice[data_rows, ('Diferencial TEM (Tamar-Fija)', bono)],
            axis=0
        )

    styled = styled.background_gradient(
        cmap='Greys_r',
        subset=pd.IndexSlice[data_rows, payoff_cols],
        axis=None,
        vmin=vmin,
        vmax=vmax
    ).format("{:.2f}%", subset=pd.IndexSlice[data_rows, :]) \
    .format("{:.2f}", subset=pd.IndexSlice[['Meses de payoff'], :])

    display(HTML('<br><br><h2>'+title_table+'</h2><br>'))
    display(styled)

"""# Simulacion Baja de tasas"""

title_chart = "Cálculo de tasas TAMAR de liquidacion de duales en diferentes escenarios futuros de DESCENSO gradual de tasas"
title_table = "Simulacion de <u>baja de tasas</u>"
TARGETs_TEM = [0.005, 0.01, 0.015, 0.02, 0.025]

df = simulate(TARGETs_TEM)
sobre_tasa_tamar = chart(df, title_chart)
showTables(TARGETs_TEM, sobre_tasa_tamar, title_table)

"""<br><br>



# Simulacion Suba de tasas
"""

title_chart = "Cálculo de tasas TAMAR de liquidacion de duales en diferentes escenarios futuros de SUBA gradual de tasas"
title_table = "Simulacion de <u>SUBA de tasas</u>"
TARGETs_TEM = [0.035, 0.04, 0.045, 0.05, 0.055]

df = simulate(TARGETs_TEM)
sobre_tasa_tamar = chart(df, title_chart)
showTables(TARGETs_TEM, sobre_tasa_tamar, title_table)